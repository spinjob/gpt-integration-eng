Here are the tests for the Python application based on the provided specification. The tests are written using pytest.

test_webhook_receiver.py
```python
import pytest
from webhook_receiver import WebhookReceiver

def test_webhook_receiver_init():
    receiver = WebhookReceiver()
    assert receiver is not None

def test_webhook_receiver_handle_webhook():
    receiver = WebhookReceiver()
    webhook_data = {"test": "data"}
    assert receiver.handle_webhook(webhook_data) == True
```

test_api_client.py
```python
import pytest
from api_client import APIClient

def test_api_client_init():
    client = APIClient()
    assert client is not None

@pytest.mark.parametrize("endpoint, data, expected", [
    ("createOrder", {"test": "data"}, True),
    ("updateOrderStatus", {"test": "data"}, True),
    ("getMenu", {"test": "data"}, True),
    ("publishError", {"test": "data"}, True),
])
def test_api_client_request(endpoint, data, expected):
    client = APIClient()
    assert client.request(endpoint, data) == expected
```

test_data_mapper.py
```python
import pytest
from data_mapper import DataMapper

def test_data_mapper_init():
    mapper = DataMapper()
    assert mapper is not None

def test_data_mapper_map_data():
    mapper = DataMapper()
    mapping_instructions = {"test": "instructions"}
    data = {"test": "data"}
    assert mapper.map_data(mapping_instructions, data) == True
```

test_workflow_manager.py
```python
import pytest
from workflow_manager import WorkflowManager

def test_workflow_manager_init():
    manager = WorkflowManager()
    assert manager is not None

def test_workflow_manager_run_workflow():
    manager = WorkflowManager()
    webhook_data = {"test": "data"}
    assert manager.run_workflow(webhook_data) == True
```

test_error_handler.py
```python
import pytest
from error_handler import ErrorHandler

def test_error_handler_init():
    handler = ErrorHandler()
    assert handler is not None

def test_error_handler_handle_error():
    handler = ErrorHandler()
    error = Exception("Test error")
    assert handler.handle_error(error) == True
```

test_main.py
```python
import pytest
from main import main

def test_main():
    assert main() == True
```

Note: These are very basic tests that only check if the methods return True. In a real-world scenario, you would want to write more comprehensive tests that check for specific outcomes and handle different edge cases.