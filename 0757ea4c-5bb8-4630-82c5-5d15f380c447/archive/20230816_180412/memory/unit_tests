Sure, here are the tests for the above specification. We will use pytest for writing the tests.

`test_webhook_handler.py`
```python
import pytest
from webhook_handler import WebhookHandler

def test_handle_request():
    handler = WebhookHandler()
    request = {"method": "POST", "body": {"order": {"id": "123", "status": "NEW"}}}
    handler.handle_request(request)
    assert handler.request == request
```

`test_workflow.py`
```python
import pytest
from workflow import Workflow

def test_execute():
    workflow = Workflow()
    workflow.execute()
    assert workflow.steps_executed == True
```

`test_step.py`
```python
import pytest
from step import Step

def test_execute():
    step = Step()
    step.execute()
    assert step.request_made == True
```

`test_data_mapper.py`
```python
import pytest
from data_mapper import DataMapper

def test_map():
    mapper = DataMapper()
    input = {"order": {"id": "123", "status": "NEW"}}
    mapping = {"order.id": {"sourcePath": "order.id", "targetPath": "id"}}
    output = mapper.map(input, mapping)
    assert output == {"id": "123"}
```

`test_api.py`
```python
import pytest
from api import API

def test_request():
    api = API()
    response = api.request("GET", "/orders", {}, {})
    assert response.status_code == 200
```

`test_oauth2_client.py`
```python
import pytest
from oauth2_client import OAuth2Client

def test_get_token():
    client = OAuth2Client()
    token = client.get_token()
    assert token is not None

def test_request():
    client = OAuth2Client()
    response = client.request("GET", "/orders", {}, {})
    assert response.status_code == 200
```

`test_formula.py`
```python
import pytest
from formula import Formula

def test_apply():
    formula = Formula()
    result = formula.apply("input")
    assert result == "output"
```

`test_error_publisher.py`
```python
import pytest
from error_publisher import ErrorPublisher

def test_publish():
    publisher = ErrorPublisher()
    publisher.publish(Exception("Test error"))
    assert publisher.error_published == True
```

Please note that these are very basic tests and do not cover all edge cases. They are meant to be a starting point for more comprehensive testing.