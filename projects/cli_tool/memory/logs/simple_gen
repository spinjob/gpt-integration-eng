[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}}}, {"type": "human", "data": {"content": "Create a CLI tool in Python that allows users to resize images by specifying the desired width and height. Use the Pillow library for image manipulation.", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "The core classes, functions, and methods that will be necessary for this task are:\n\n1. `argparse` module: This will be used to parse command line arguments.\n2. `PIL` module: This is the Pillow library that will be used for image manipulation.\n3. `resize_image` function: This function will take an image path, width, and height as arguments and resize the image accordingly.\n\nNow, let's start with the entry point file, `main.py`.\n\nmain.py\n```python\nimport argparse\nfrom PIL import Image\nimport os\n\ndef resize_image(image_path, width, height):\n    \"\"\"Resizes an image to the specified width and height.\"\"\"\n    with Image.open(image_path) as img:\n        resized_img = img.resize((width, height))\n        resized_img.save(f'resized_{os.path.basename(image_path)}')\n\ndef main():\n    \"\"\"Main function to parse arguments and call the resize function.\"\"\"\n    parser = argparse.ArgumentParser(description='Resize an image.')\n    parser.add_argument('image_path', type=str, help='Path to the image file.')\n    parser.add_argument('width', type=int, help='Desired width of the image.')\n    parser.add_argument('height', type=int, help='Desired height of the image.')\n\n    args = parser.parse_args()\n\n    resize_image(args.image_path, args.width, args.height)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis is the only file needed for this task. It first defines a function `resize_image` that opens an image, resizes it, and saves the resized image with a new name. The `main` function uses `argparse` to parse command line arguments and then calls `resize_image` with the parsed arguments.\n\nThe `requirements.txt` file for this project would look like this:\n\nrequirements.txt\n```plaintext\nPillow==8.2.0\n```\n\nThis file specifies that the Pillow library is a dependency for this project. The version number is set to 8.2.0, but it can be changed to any version that is compatible with the rest of the project.", "additional_kwargs": {}, "example": false}}]