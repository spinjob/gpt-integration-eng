The architecture of the solution will consist of the following files:

1. `main.py`: This is the entry point of the application. It will contain the main function that will be executed to run the integration process.

2. `api_client.py`: This file will contain the `APIClient` class that will be responsible for making HTTP requests to the APIs.

3. `token_generator.py`: This file will contain the `TokenGenerator` class that will be responsible for generating bearer tokens for the APIs.

4. `data_transformer.py`: This file will contain the `DataTransformer` class that will be responsible for transforming the data received from API #1 to the format required by API #2.

5. `requirements.txt`: This file will contain the list of Python packages required to run the application.

Now, let's write the content of each file.

`main.py`
```python
from api_client import APIClient
from token_generator import TokenGenerator
from data_transformer import DataTransformer

def main():
    # Generate bearer tokens for both APIs
    token_generator = TokenGenerator()
    token1 = token_generator.generate_token(api_number=1)
    token2 = token_generator.generate_token(api_number=2)

    # Make a GET request to API #1
    api_client = APIClient()
    response = api_client.get(api_number=1, path='/v1/menu', headers={'X-Store-Id': 'store_id', 'Authorization': f'Bearer {token1}'})

    # Transform the data received from API #1
    data_transformer = DataTransformer()
    transformed_data = data_transformer.transform(response)

    # Make a POST request to API #2 with the transformed data
    api_client.post(api_number=2, path='/v1/menus', headers={'X-Store-Id': 'store_id', 'Authorization': f'Bearer {token2}'}, data=transformed_data)

if __name__ == '__main__':
    main()
```

`api_client.py`
```python
import requests

class APIClient:
    BASE_URLS = {
        1: 'https://partners.cloudkitchens.com',
        2: 'https://partners.cloudkitchens.com'
    }

    def get(self, api_number, path, headers):
        url = self.BASE_URLS[api_number] + path
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()

    def post(self, api_number, path, headers, data):
        url = self.BASE_URLS[api_number] + path
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
```

`token_generator.py`
```python
import requests

class TokenGenerator:
    TOKEN_URLS = {
        1: 'https://partners.cloudkitchens.com/v1/auth/token',
        2: 'https://partners.cloudkitchens.com/v1/auth/token'
    }

    def generate_token(self, api_number):
        url = self.TOKEN_URLS[api_number]
        data = {
            'scope': 'menus.get_current menus.publish orders.update storefront.store_availability menus.entity_suspension orders.create' if api_number == 1 else 'callback.error.write manager.menus manager.orders menus.async_job.read menus.get_current menus.read menus.upsert menus.upsert_hours orders.read ping',
            'grant_type': 'client_credentials',
            'client_id': 'client_id',
            'client_secret': 'client_secret'
        }
        response = requests.post(url, data=data)
        response.raise_for_status()
        return response.json()['access_token']
```

`data_transformer.py`
```python
class DataTransformer:
    def transform(self, data):
        transformed_data = {}
        for category_id, category in data['categories'].items():
            transformed_data['categories.' + category_id] = category
        for modifier_group_id, modifier_group in data['modifierGroups'].items():
            transformed_data['modifierGroups.' + modifier_group_id] = modifier_group
        return transformed_data
```

`requirements.txt`
```
requests
```

To run the integration process, you can execute the `main.py` script. The script will generate bearer tokens for both APIs, make a GET request to API #1, transform the data received from API #1, and make a POST request to API #2 with the transformed data.