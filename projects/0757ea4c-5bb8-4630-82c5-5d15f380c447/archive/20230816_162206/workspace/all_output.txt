The architecture of the application will be divided into several Python files, each with a specific purpose. The main files will be:

1. `main.py`: This is the entry point of the application. It will handle the webhook trigger and control the workflow of the application.

2. `api.py`: This file will contain the classes for the two APIs (Point-of-Sale API and Marketplace API). Each class will have methods for each API endpoint that needs to be called.

3. `auth.py`: This file will handle the OAuth2 authentication for both APIs.

4. `data_mapping.py`: This file will contain the logic for mapping the data between the APIs according to the provided JSON.

5. `requirements.txt`: This file will list all the Python packages that need to be installed for the application to run.

Now, let's write the content of each file.

`requirements.txt`
```plaintext
flask
requests
```

`main.py`
```python
from flask import Flask, request
from api import PointOfSaleAPI, MarketplaceAPI
from data_mapping import DataMapper

app = Flask(__name__)

pos_api = PointOfSaleAPI()
marketplace_api = MarketplaceAPI()
data_mapper = DataMapper()

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.json

    # Step 1: Create order in Point-of-Sale API
    mapped_data = data_mapper.map(data, 'createOrder')
    pos_api.create_order(mapped_data)

    # Step 2: Update order status in Marketplace API
    mapped_data = data_mapper.map(data, 'updateOrderStatus')
    marketplace_api.update_order_status(mapped_data)

    # Step 3: Get menu from Point-of-Sale API
    mapped_data = data_mapper.map(data, 'getMenu')
    pos_api.get_menu(mapped_data)

    # Step 4: Publish error in Marketplace API
    mapped_data = data_mapper.map(data, 'publishError')
    marketplace_api.publish_error(mapped_data)

    return '', 200

if __name__ == '__main__':
    app.run(port=5000)
```

`api.py`
```python
import requests
from auth import get_token

class PointOfSaleAPI:
    def __init__(self):
        self.base_url = 'https://partners.cloudkitchens.com'
        self.token = get_token('Point-of-Sale')

    def create_order(self, data):
        url = f'{self.base_url}/createOrder'
        headers = {'Authorization': f'Bearer {self.token}'}
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        return response.json()

    def get_menu(self, data):
        url = f'{self.base_url}/getMenu'
        headers = {'Authorization': f'Bearer {self.token}'}
        response = requests.get(url, headers=headers, json=data)
        response.raise_for_status()
        return response.json()

class MarketplaceAPI:
    def __init__(self):
        self.base_url = 'https://partners.cloudkitchens.com'
        self.token = get_token('Marketplace')

    def update_order_status(self, data):
        url = f'{self.base_url}/updateOrderStatus'
        headers = {'Authorization': f'Bearer {self.token}'}
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        return response.json()

    def publish_error(self, data):
        url = f'{self.base_url}/publishError'
        headers = {'Authorization': f'Bearer {self.token}'}
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        return response.json()
```

`auth.py`
```python
import requests

def get_token(api_name):
    url = 'https://partners.cloudkitchens.com/v1/auth/token'
    data = {
        'client_id': 'client_id_value',
        'client_secret': 'client_secret_value',
        'scope': 'scope_value',
        'grant_type': 'client_credentials'
    }
    response = requests.post(url, data=data)
    response.raise_for_status()
    return response.json()['access_token']
```

`data_mapping.py`
```python
class DataMapper:
    def map(self, data, step):
        # The actual implementation of this method will depend on the provided JSON.
        # For now, we'll just return the input data unchanged.
        return data
```

This code should be fully functional, assuming the correct client_id, client_secret, and scope values are provided in the `get_token` function in `auth.py`, and the actual data mapping logic is implemented in the `map` method in `data_mapping.py`.