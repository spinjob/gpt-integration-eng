The architecture of the application will consist of several Python files, each responsible for a specific part of the application. The main components of the application will be:

1. `main.py`: This is the entry point of the application. It will handle the webhook trigger and orchestrate the workflow steps.

2. `api_client.py`: This file will contain the `APIClient` class, which will be responsible for making HTTP requests to the APIs.

3. `auth.py`: This file will contain the `OAuth2ClientCredentials` class, which will handle the OAuth2 client credentials flow for both APIs.

4. `data_mapper.py`: This file will contain the `DataMapper` class, which will handle the mapping of data between the webhook request, API responses, and API requests according to the provided Data Mapping JSON.

5. `formulas.py`: This file will contain functions for the formulas used in the Data Mapping JSON.

6. `requirements.txt`: This file will list the Python packages required by the application.

Now, let's write the code for each file.

`requirements.txt`
```plaintext
requests
flask
```

`main.py`
```python
from flask import Flask, request
from api_client import APIClient
from data_mapper import DataMapper

app = Flask(__name__)
api_client = APIClient()
data_mapper = DataMapper()

@app.route('/webhook', methods=['POST'])
def webhook():
    webhook_data = request.json
    step1_data = data_mapper.map(webhook_data, 'step1.json')
    step1_response = api_client.create_order(step1_data)
    step2_data = data_mapper.map(step1_response, 'step2.json')
    step2_response = api_client.update_order_status(step2_data)
    step3_data = data_mapper.map(step2_response, 'step3.json')
    step3_response = api_client.get_menu(step3_data)
    step4_data = data_mapper.map(step3_response, 'step4.json')
    api_client.publish_error(step4_data)
    return '', 200

if __name__ == '__main__':
    app.run(port=5000)
```

`api_client.py`
```python
import requests
from auth import OAuth2ClientCredentials

class APIClient:
    def __init__(self):
        self.auth = OAuth2ClientCredentials()

    def create_order(self, data):
        headers = {'Authorization': f'Bearer {self.auth.get_token("Marketplace API")}'}
        response = requests.post('https://partners.cloudkitchens.com/v1/orders', headers=headers, json=data)
        response.raise_for_status()
        return response.json()

    def update_order_status(self, data):
        headers = {'Authorization': f'Bearer {self.auth.get_token("Point-of-Sale API")}'}
        response = requests.put(f'https://partners.cloudkitchens.com/v1/orders/{data["orderId"]}', headers=headers, json=data)
        response.raise_for_status()
        return response.json()

    def get_menu(self, data):
        headers = {'Authorization': f'Bearer {self.auth.get_token("Marketplace API")}'}
        response = requests.get('https://partners.cloudkitchens.com/v1/menu', headers=headers)
        response.raise_for_status()
        return response.json()

    def publish_error(self, data):
        headers = {'Authorization': f'Bearer {self.auth.get_token("Point-of-Sale API")}'}
        response = requests.post('https://partners.cloudkitchens.com/v1/errors', headers=headers, json=data)
        response.raise_for_status()
```

`auth.py`
```python
import requests

class OAuth2ClientCredentials:
    def __init__(self):
        self.tokens = {}

    def get_token(self, api_name):
        if api_name not in self.tokens:
            self.tokens[api_name] = self._request_token(api_name)
        return self.tokens[api_name]

    def _request_token(self, api_name):
        url = 'https://partners.cloudkitchens.com/v1/auth/token'
        data = {'client_id': 'be04e745-844d-4a6c-8fba-f71199dc8f05'} if api_name == 'Marketplace API' else {'client_id': '04db98cc-0c84-47e2-b57f-bfd6329c4675'}
        response = requests.post(url, data=data)
        response.raise_for_status()
        return response.json()['access_token']
```

`data_mapper.py`
```python
import json

class DataMapper:
    def map(self, source_data, mapping_file):
        with open(mapping_file) as f:
            mapping = json.load(f)
        target_data = {}
        for key, value in mapping.items():
            target_data[key] = source_data[value['sourcePath']]
        return target_data
```

`formulas.py`
```python
def ifthen(input_value, condition, then_value, else_value):
    return then_value if input_value == condition else else_value

def substring(input_value, starting_index, ending_index):
    return input_value[starting_index:ending_index]

def prepend(input_value, prepend_value):
    return prepend_value + input_value

def division(input_value, divisor):
    return input_value / divisor
```

This code should be placed in a directory structure like this:

```
/myapp
  /main.py
  /api_client.py
  /auth.py
  /data_mapper.py
  /formulas.py
  /requirements.txt
  /step1.json
  /step2.json
  /step3.json
  /step4.json
```

To run the application, navigate to the `myapp` directory and execute the command `python main.py`. The application will start a web server listening on port 5000 and wait for incoming webhook requests.