The architecture of the application will be divided into several Python files, each containing a specific class or function. The main files will be:

1. `main.py`: This is the entry point of the application. It will handle the triggering of the workflow and the execution of each step.

2. `api.py`: This file will contain the `API` class, which will be responsible for making HTTP requests to the APIs.

3. `auth.py`: This file will contain the `Auth` class, which will handle the OAuth2 authentication for the APIs.

4. `workflow.py`: This file will contain the `Workflow` class, which will manage the execution of the workflow steps.

5. `data_mapping.py`: This file will contain the `DataMapping` class, which will handle the mapping and transformation of data between the APIs.

6. `formulas.py`: This file will contain various functions that will be used in the formulas for data transformation.

7. `requirements.txt`: This file will list all the Python packages that are required to run the application.

Now, let's write the content of each file.

`main.py`
```python
import json
from api import API
from auth import Auth
from workflow import Workflow
from data_mapping import DataMapping

def main():
    # Load the workflow trigger and steps from JSON files
    with open('workflow_trigger.json') as f:
        workflow_trigger = json.load(f)
    with open('workflow_steps.json') as f:
        workflow_steps = json.load(f)

    # Initialize the API and Auth objects
    api = API()
    auth = Auth()

    # Authenticate with the APIs
    auth.authenticate(api)

    # Initialize the Workflow and DataMapping objects
    workflow = Workflow(api)
    data_mapping = DataMapping()

    # Execute the workflow
    workflow.execute(workflow_trigger, workflow_steps, data_mapping)

if __name__ == "__main__":
    main()
```

`api.py`
```python
import requests

class API:
    def __init__(self):
        self.session = requests.Session()

    def request(self, method, url, headers=None, params=None, data=None):
        response = self.session.request(method, url, headers=headers, params=params, data=data)
        response.raise_for_status()
        return response.json()
```

`auth.py`
```python
class Auth:
    def __init__(self):
        self.tokens = {}

    def authenticate(self, api):
        # Authenticate with the APIs and store the access tokens
        self.tokens['Marketplace API'] = self.get_token(api, 'Marketplace API')
        self.tokens['Point-of-Sale API'] = self.get_token(api, 'Point-of-Sale API')

    def get_token(self, api, api_name):
        # Send a token request to the API and return the access token
        response = api.request('POST', f'https://partners.cloudkitchens.com/v1/auth/token', data={
            'client_id': 'your_client_id',
            'client_secret': 'your_client_secret',
            'scope': 'your_scope',
            'grant_type': 'client_credentials'
        })
        return response['access_token']
```

`workflow.py`
```python
class Workflow:
    def __init__(self, api):
        self.api = api

    def execute(self, workflow_trigger, workflow_steps, data_mapping):
        # Execute each step in the workflow
        for step in workflow_steps:
            # Map the data for the step
            data = data_mapping.map_data(step['data_mapping'])

            # Send the API request for the step
            self.api.request(step['method'], step['url'], headers=step['headers'], data=data)
```

`data_mapping.py`
```python
class DataMapping:
    def map_data(self, data_mapping):
        # Map the data according to the data mapping instructions
        mapped_data = {}
        for key, value in data_mapping.items():
            mapped_data[key] = self.map_value(value)
        return mapped_data

    def map_value(self, value):
        # Map a single value according to the data mapping instructions
        if 'formula' in value:
            # Apply the formula to the value
            return formulas[value['formula']](value['value'])
        else:
            # Return the value as is
            return value['value']
```

`formulas.py`
```python
def if_then(value):
    # Implement the "If, then" formula
    if value['if']:
        return value['then']
    else:
        return value['else']

def substring(value):
    # Implement the "Substring" formula
    return value['value'][value['startingIndex']:value['endingIndex']]

def prepend(value):
    # Implement the "Prepend" formula
    return value['prepend'] + value['value']

formulas = {
    'ifthen': if_then,
    'substring': substring,
    'prepend': prepend
}
```

`requirements.txt`
```
requests
```

This Python application uses the `requests` library to send HTTP requests to the APIs. The `Auth` class handles the OAuth2 authentication for the APIs. The `Workflow` class manages the execution of the workflow steps, and the `DataMapping` class handles the mapping and transformation of data between the APIs. The `formulas.py` file contains various functions that are used in the formulas for data transformation. The `main.py` file is the entry point of the application, which loads the workflow trigger and steps from JSON files, initializes the necessary objects, authenticates with the APIs, and executes the workflow.