[{"type": "system", "data": {"content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallel if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n", "additional_kwargs": {}}}, {"type": "human", "data": {"content": "Information about the codebase:\n\nLet's start with the entry point of the application, which is the `main.py` file. This file will import and use the other modules to start the application.\n\nmain.py\n```python\nimport os\nfrom flask import Flask, request\nfrom webhookhandler import WebhookHandler\n\napp = Flask(__name__)\nhandler = WebhookHandler()\n\n@app.route('/webhook', methods=['POST'])\ndef handle_webhook():\n    data = request.get_json()\n    handler.handle_webhook(data)\n    return '', 200\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))\n```\n\nNext, let's implement the `WebhookHandler` class in the `webhookhandler.py` file. This class will be responsible for handling the webhook and triggering the workflow.\n\nwebhookhandler.py\n```python\nfrom workflow import Workflow\n\nclass WebhookHandler:\n    def __init__(self):\n        self.workflow = Workflow()\n\n    def handle_webhook(self, data):\n        self.workflow.execute(data)\n```\n\nNow, let", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "a) Install dependencies:\n\n```bash\npython3 -m venv venv\nsource venv/bin/activate\npip install flask\n```\n\nb) Run all necessary parts of the codebase:\n\n```bash\nexport PORT=8080\npython main.py\n```", "additional_kwargs": {}, "example": false}}]