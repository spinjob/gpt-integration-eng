The program is a Python application that integrates two APIs: the Marketplace API and the Point-of-Sale API. The application will be triggered by a webhook called orderCreateWebhook from the Marketplace API. The webhook will be configured to send a POST request to a configured URL. 

The application will perform a series of steps, each step being an HTTP request to one of the two APIs. The steps are as follows:

1. Create an order in the Point-of-Sale API using data from the webhook trigger.
2. Update the order status in the Marketplace API.
3. Get the menu from the Point-of-Sale API.
4. If there is an error in any of the previous steps, publish the error to the Marketplace API.

The application will also handle the OAuth2 client credentials flow for both APIs. The client ID and client secret for each API will be manually configured.

Core Classes, Functions, and Methods:

1. `OAuth2Client`: This class will handle the OAuth2 client credentials flow for both APIs. It will have methods to generate and refresh access tokens.

2. `WebhookHandler`: This class will handle the webhook trigger. It will parse the webhook data and trigger the workflow.

3. `Workflow`: This class will handle the workflow steps. It will have methods to perform each step, handle errors, and manage the data mapping between steps.

4. `APIClient`: This class will handle the HTTP requests to the APIs. It will have methods to send GET and POST requests, handle responses, and manage headers and parameters.

5. `DataMapper`: This class will handle the data mapping between steps. It will have methods to map and adapt values according to the provided JSON.

6. `ErrorHandler`: This class will handle errors. It will have methods to log errors and publish them to the Marketplace API.

7. `main()`: This function will be the entry point of the application. It will create instances of the above classes and start the webhook listener.

8. `ifthen()`: This function will implement the "If, then" formula. It will take an input value, a condition, and two possible output values, and return one of the output values based on the condition.

9. `substring()`: This function will implement the "Substring" formula. It will take an input string and two indices, and return the substring between those indices.

10. `prepend()`: This function will implement the "Prepend" formula. It will take an input string and a prefix, and return the input string with the prefix prepended.

11. `division()`: This function will implement the "Division" formula. It will take an input number and a divisor, and return the result of the division.