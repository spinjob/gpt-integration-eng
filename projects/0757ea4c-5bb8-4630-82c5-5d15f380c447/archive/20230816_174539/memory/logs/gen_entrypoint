[{"type": "system", "data": {"content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallel if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n", "additional_kwargs": {}}}, {"type": "human", "data": {"content": "Information about the codebase:\n\nmain.py\n```python\nimport requests\nfrom webhook_handler import WebhookHandler\nfrom api_client import APIClient\nfrom data_mapper import DataMapper\nfrom workflow_manager import WorkflowManager\nfrom error_handler import ErrorHandler\n\ndef main(webhook_data):\n    # Create instances of the classes\n    webhook_handler = WebhookHandler()\n    api_client = APIClient()\n    data_mapper = DataMapper()\n    workflow_manager = WorkflowManager(api_client, data_mapper)\n    error_handler = ErrorHandler(api_client)\n\n    try:\n        # Parse the webhook data\n        parsed_data = webhook_handler.parse_webhook(webhook_data)\n\n        # Run the workflow\n        workflow_manager.run_workflow(parsed_data)\n        \n        return \"Workflow completed successfully\"\n    except Exception as e:\n        # Handle any errors\n        error_handler.handle_error(str(e))\n        return \"Error occurred: \" + str(e)\n\nif __name__ == \"__main__\":\n    # Placeholder for the webhook data\n    webhook_data = {}\n    main(webhook_data)\n```\n\nwebhook_handler.py\n```python\nclass WebhookHandler:\n    def parse_webhook(self, webhook_data):\n        # Extract the relevant data from the webhook\n        return", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "a) Install dependencies\n\n```bash\npip install --user requests\n```\n\nb) Run all necessary parts of the codebase\n\n```bash\npython main.py\n```", "additional_kwargs": {}, "example": false}}]