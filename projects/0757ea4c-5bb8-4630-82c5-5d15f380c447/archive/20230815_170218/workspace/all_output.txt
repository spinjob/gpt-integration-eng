The architecture of the application will consist of the following core classes and functions:

1. `APIClient`: This class will be responsible for making HTTP requests to the APIs. It will have methods for each type of request (GET, POST, etc.) and will handle authentication.

2. `OAuth2ClientCredentials`: This class will handle the OAuth2 client credentials flow for both APIs. It will have methods to generate and refresh access tokens.

3. `WorkflowTrigger`: This class will handle the triggering of the workflow. It will have a method to listen for the webhook and start the workflow.

4. `WorkflowStep`: This class will represent a step in the workflow. It will have methods to execute the step and handle the data mapping.

5. `DataMapper`: This class will handle the data mapping for each step. It will have methods to apply the formulas and map the data from the input to the output.

6. `Formula`: This class will represent a formula to be applied in the data mapping. It will have methods to execute the formula.

7. `main`: This function will be the entry point of the application. It will initialize the classes and start the workflow trigger.

Now, let's implement these classes and functions in Python.

`requirements.txt`
```python
requests
flask
```

`apiclient.py`
```python
import requests

class APIClient:
    def __init__(self, base_url):
        self.base_url = base_url

    def get(self, path, headers=None):
        return requests.get(self.base_url + path, headers=headers)

    def post(self, path, data=None, headers=None):
        return requests.post(self.base_url + path, data=data, headers=headers)
```

`oauth2clientcredentials.py`
```python
from apiclient import APIClient

class OAuth2ClientCredentials:
    def __init__(self, client_id, client_secret, token_url):
        self.client_id = client_id
        self.client_secret = client_secret
        self.token_url = token_url
        self.api_client = APIClient('')

    def generate_token(self):
        data = {
            'client_id': self.client_id,
            'client_secret': self.client_secret,
            'grant_type': 'client_credentials'
        }
        response = self.api_client.post(self.token_url, data=data)
        return response.json()['access_token']
```

`workflowtrigger.py`
```python
from flask import Flask, request
from threading import Thread

class WorkflowTrigger:
    def __init__(self, workflow):
        self.workflow = workflow
        self.app = Flask(__name__)

    def start(self):
        @self.app.route('/webhook', methods=['POST'])
        def handle_webhook():
            self.workflow.execute(request.json)
            return '', 200

        Thread(target=self.app.run).start()
```

`workflowstep.py`
```python
from datamapper import DataMapper

class WorkflowStep:
    def __init__(self, api_client, method, path, data_mapping):
        self.api_client = api_client
        self.method = method
        self.path = path
        self.data_mapper = DataMapper(data_mapping)

    def execute(self, input_data):
        mapped_data = self.data_mapper.map(input_data)
        response = getattr(self.api_client, self.method)(self.path, data=mapped_data)
        return response.json()
```

`datamapper.py`
```python
from formula import Formula

class DataMapper:
    def __init__(self, data_mapping):
        self.data_mapping = data_mapping

    def map(self, input_data):
        output_data = {}
        for key, mapping in self.data_mapping.items():
            value = input_data
            for part in mapping['input']['path'].split('.'):
                value = value[part]
            for formula in mapping['input'].get('formulas', []):
                value = Formula(formula).execute(value)
            output_data[key] = value
        return output_data
```

`formula.py`
```python
class Formula:
    def __init__(self, formula):
        self.formula = formula

    def execute(self, value):
        if self.formula['name'] == 'If, then':
            condition = self.formula['inputs']['ifThen'][0]
            if value == condition['if']['value']:
                return condition['then']['value']
            else:
                return condition['else']['value']
        elif self.formula['name'] == 'Substring':
            return value[int(self.formula['inputs']['substring']['startingIndex']):int(self.formula['inputs']['substring']['endingIndex'])]
        elif self.formula['name'] == 'Prepend':
            return self.formula['inputs']['prepend'] + value
        elif self.formula['name'] == 'Division':
            return value / int(self.formula['inputs']['division'])
```

`main.py`
```python
from apiclient import APIClient
from oauth2clientcredentials import OAuth2ClientCredentials
from workflowtrigger import WorkflowTrigger
from workflowstep import WorkflowStep

def main():
    marketplace_api_client = APIClient('https://partners.cloudkitchens.com')
    pos_api_client = APIClient('https://partners.cloudkitchens.com')

    marketplace_auth = OAuth2ClientCredentials('client_id', 'client_secret', '/v1/auth/token')
    pos_auth = OAuth2ClientCredentials('client_id', 'client_secret', '/v1/auth/token')

    marketplace_api_client.headers = {'Authorization': 'Bearer ' + marketplace_auth.generate_token()}
    pos_api_client.headers = {'Authorization': 'Bearer ' + pos_auth.generate_token()}

    workflow_steps = [
        WorkflowStep(pos_api_client, 'createOrder', '/v1/orders', data_mapping_1),
        WorkflowStep(marketplace_api_client, 'updateOrderStatus', '/v1/orders/{orderId}', data_mapping_2),
        WorkflowStep(pos_api_client, 'getMenu', '/v1/menus', data_mapping_3),
        WorkflowStep(marketplace_api_client, 'publishError', '/v1/errors', data_mapping_4)
    ]

    workflow_trigger = WorkflowTrigger(workflow_steps)
    workflow_trigger.start()

if __name__ == '__main__':
    main()
```

Please replace `'client_id'` and `'client_secret'` with the actual client ID and client secret. Also, replace `data_mapping_1`, `data_mapping_2`, `data_mapping_3`, and `data_mapping_4` with the actual data mapping JSON.