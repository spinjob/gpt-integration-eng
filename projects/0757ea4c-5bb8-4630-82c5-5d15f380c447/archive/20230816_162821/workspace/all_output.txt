The architecture of the application will consist of the following core classes and functions:

1. `APIClient`: This class will be responsible for making HTTP requests to the APIs. It will include methods for each type of request (GET, POST, etc.) and will handle authentication.

2. `OAuth2Client`: This class will inherit from `APIClient` and will implement the OAuth2 authentication scheme.

3. `WorkflowTrigger`: This class will define the condition required to run the application. It will include a method to check if the condition is met.

4. `WorkflowStep`: This class will represent a step in the workflow. It will include a method to execute the step, which will involve making an API request and handling the response.

5. `DataMapper`: This class will handle the mapping of data between steps. It will include methods to extract data from a source (such as a webhook request body or a previous step's response body), apply any necessary transformations, and insert the data into the target location.

6. `Formula`: This class will represent a transformation to be applied to a data value. It will include a method to execute the transformation.

7. `Workflow`: This class will represent the entire workflow. It will include methods to add steps, execute the workflow, and handle errors.

8. `main`: This function will be the entry point for the application. It will create an instance of `Workflow`, add the necessary steps, and execute the workflow.

Now, let's implement these classes and functions in Python.

`requirements.txt`
```plaintext
requests
flask
```

`api_client.py`
```python
import requests

class APIClient:
    def __init__(self, base_url):
        self.base_url = base_url

    def get(self, path, headers=None, params=None):
        return requests.get(self.base_url + path, headers=headers, params=params)

    def post(self, path, headers=None, data=None):
        return requests.post(self.base_url + path, headers=headers, data=data)
```

`oauth2_client.py`
```python
from api_client import APIClient

class OAuth2Client(APIClient):
    def __init__(self, base_url, token_url, client_id, client_secret, scope):
        super().__init__(base_url)
        self.token_url = token_url
        self.client_id = client_id
        self.client_secret = client_secret
        self.scope = scope
        self.token = None

    def authenticate(self):
        data = {
            'client_id': self.client_id,
            'client_secret': self.client_secret,
            'scope': self.scope,
            'grant_type': 'client_credentials'
        }
        response = self.post(self.token_url, data=data)
        response.raise_for_status()
        self.token = response.json()['access_token']

    def get(self, path, headers=None, params=None):
        if self.token is None:
            self.authenticate()
        if headers is None:
            headers = {}
        headers['Authorization'] = f'Bearer {self.token}'
        return super().get(path, headers=headers, params=params)

    def post(self, path, headers=None, data=None):
        if self.token is None:
            self.authenticate()
        if headers is None:
            headers = {}
        headers['Authorization'] = f'Bearer {self.token}'
        return super().post(path, headers=headers, data=data)
```

`workflow_trigger.py`
```python
from flask import Flask, request

app = Flask(__name__)

class WorkflowTrigger:
    def __init__(self, webhook_url):
        self.webhook_url = webhook_url

    @app.route(self.webhook_url, methods=['POST'])
    def check_condition():
        # Placeholder for condition check
        return 'OK'
```

`workflow_step.py`
```python
class WorkflowStep:
    def __init__(self, api_client, request_method, path, data_mapping):
        self.api_client = api_client
        self.request_method = request_method
        self.path = path
        self.data_mapping = data_mapping

    def execute(self, previous_data):
        # Placeholder for request execution and response handling
        pass
```

`data_mapper.py`
```python
class DataMapper:
    def __init__(self, data_mapping):
        self.data_mapping = data_mapping

    def map_data(self, source_data):
        # Placeholder for data mapping
        pass
```

`formula.py`
```python
class Formula:
    def __init__(self, formula_type, inputs):
        self.formula_type = formula_type
        self.inputs = inputs

    def execute(self, value):
        # Placeholder for formula execution
        pass
```

`workflow.py`
```python
class Workflow:
    def __init__(self, trigger):
        self.trigger = trigger
        self.steps = []

    def add_step(self, step):
        self.steps.append(step)

    def execute(self):
        # Placeholder for workflow execution
        pass

    def handle_error(self, error):
        # Placeholder for error handling
        pass
```

`main.py`
```python
from oauth2_client import OAuth2Client
from workflow_trigger import WorkflowTrigger
from workflow_step import WorkflowStep
from data_mapper import DataMapper
from workflow import Workflow

def main():
    # Placeholder for workflow creation and execution
    pass

if __name__ == '__main__':
    main()
```

This is a basic implementation of the architecture. The placeholders in the code should be replaced with the actual logic for each part of the application, based on the specific requirements.