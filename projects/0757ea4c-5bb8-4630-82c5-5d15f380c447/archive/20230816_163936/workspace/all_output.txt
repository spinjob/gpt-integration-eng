The architecture of the application will be divided into several Python files, each responsible for a specific part of the application. The main files will be:

1. `main.py`: This is the entry point of the application. It will handle the webhook trigger and orchestrate the workflow steps.

2. `api_client.py`: This file will contain the `APIClient` class, which will be responsible for making HTTP requests to the APIs.

3. `auth.py`: This file will contain the `OAuth2ClientCredentials` class, which will handle the OAuth2 client credentials flow for both APIs.

4. `data_mapper.py`: This file will contain the `DataMapper` class, which will handle the mapping of data between the webhook, the APIs, and the workflow steps.

5. `formulas.py`: This file will contain various formula functions that will be used in the data mapping process.

6. `requirements.txt`: This file will list all the Python packages that the application depends on.

Now, let's write the content of each file.

`main.py`
```python
import json
from flask import Flask, request
from api_client import APIClient
from data_mapper import DataMapper

app = Flask(__name__)
api_client = APIClient()
data_mapper = DataMapper()

@app.route('/webhook', methods=['POST'])
def webhook():
    webhook_data = request.get_json()

    # Step 1: Create Order
    create_order_mapping = json.loads(open('step1_mapping.json').read())
    create_order_data = data_mapper.map_data(webhook_data, create_order_mapping)
    create_order_response = api_client.create_order(create_order_data)

    # Step 2: Update Order Status
    update_order_status_mapping = json.loads(open('step2_mapping.json').read())
    update_order_status_data = data_mapper.map_data(create_order_response, update_order_status_mapping)
    update_order_status_response = api_client.update_order_status(update_order_status_data)

    # Step 3: Get Menu
    get_menu_mapping = json.loads(open('step3_mapping.json').read())
    get_menu_data = data_mapper.map_data(update_order_status_response, get_menu_mapping)
    get_menu_response = api_client.get_menu(get_menu_data)

    # Step 4: Publish Error
    publish_error_mapping = json.loads(open('step4_mapping.json').read())
    publish_error_data = data_mapper.map_data(get_menu_response, publish_error_mapping)
    publish_error_response = api_client.publish_error(publish_error_data)

    return 'Workflow completed', 200

if __name__ == '__main__':
    app.run(port=5000)
```

`api_client.py`
```python
import requests
from auth import OAuth2ClientCredentials

class APIClient:
    def __init__(self):
        self.auth = OAuth2ClientCredentials()

    def create_order(self, data):
        headers = {'Authorization': f'Bearer {self.auth.get_token("Point-of-Sale API")}'}
        response = requests.post('https://partners.cloudkitchens.com/v1/orders', headers=headers, json=data)
        response.raise_for_status()
        return response.json()

    def update_order_status(self, data):
        headers = {'Authorization': f'Bearer {self.auth.get_token("Marketplace API")}'}
        response = requests.put(f'https://partners.cloudkitchens.com/v1/orders/{data["orderId"]}', headers=headers, json=data)
        response.raise_for_status()
        return response.json()

    def get_menu(self, data):
        headers = {'Authorization': f'Bearer {self.auth.get_token("Point-of-Sale API")}'}
        response = requests.get('https://partners.cloudkitchens.com/v1/menus', headers=headers)
        response.raise_for_status()
        return response.json()

    def publish_error(self, data):
        headers = {'Authorization': f'Bearer {self.auth.get_token("Marketplace API")}'}
        response = requests.post('https://partners.cloudkitchens.com/v1/errors', headers=headers, json=data)
        response.raise_for_status()
        return response.json()
```

`auth.py`
```python
import requests

class OAuth2ClientCredentials:
    def __init__(self):
        self.tokens = {}

    def get_token(self, api_name):
        if api_name not in self.tokens:
            self.tokens[api_name] = self._request_token(api_name)
        return self.tokens[api_name]

    def _request_token(self, api_name):
        url = 'https://partners.cloudkitchens.com/v1/auth/token'
        data = {
            'client_id': 'client_id_for_' + api_name,
            'client_secret': 'client_secret_for_' + api_name,
            'scope': 'scope_for_' + api_name,
            'grant_type': 'client_credentials'
        }
        response = requests.post(url, data=data)
        response.raise_for_status()
        return response.json()['access_token']
```

`data_mapper.py`
```python
import formulas

class DataMapper:
    def map_data(self, source_data, mapping):
        target_data = {}
        for key, value in mapping.items():
            input_data = self._get_data(source_data, value['input'])
            for formula in value['input'].get('formulas', []):
                input_data = getattr(formulas, formula['name'])(input_data, **formula['inputs'])
            self._set_data(target_data, value['output'], input_data)
        return target_data

    def _get_data(self, data, path_info):
        data = data[path_info['in']]
        for key in path_info['path'].split('.'):
            data = data[key]
        return data

    def _set_data(self, data, path_info, value):
        keys = path_info['path'].split('.')
        for key in keys[:-1]:
            if key not in data:
                data[key] = {}
            data = data[key]
        data[keys[-1]] = value
```

`formulas.py`
```python
def ifthen(input_data, ifThen):
    for condition in ifThen:
        if input_data == condition['if']['value']:
            return condition['then']['value']
    return condition['else']['value']

def substring(input_data, startingIndex, endingIndex):
    return input_data[startingIndex:endingIndex]

def prepend(input_data, prepend):
    return prepend + input_data

def division(input_data, division):
    return input_data / division
```

`requirements.txt`
```
flask
requests
```

This completes the implementation of the application. The application can be run by executing the `main.py` file. The application will start a Flask server that listens for incoming webhook requests on the `/webhook` endpoint. When a webhook request is received, the application will trigger the workflow steps, which involve making HTTP requests to the APIs and mapping data between the webhook, the APIs, and the workflow steps.