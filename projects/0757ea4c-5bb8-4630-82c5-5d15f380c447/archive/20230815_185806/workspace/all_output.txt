The architecture of this application will be divided into several Python files, each responsible for a specific functionality. The main files will be:

1. `main.py`: This will be the entry point of the application. It will handle the webhook trigger and orchestrate the workflow steps.

2. `api_client.py`: This file will contain the `APIClient` class, which will be responsible for making HTTP requests to the APIs.

3. `auth.py`: This file will contain the `OAuth2` class, which will handle the OAuth2 authentication for the APIs.

4. `data_mapper.py`: This file will contain the `DataMapper` class, which will handle the data mapping between each step according to the provided JSON.

5. `formulas.py`: This file will contain the implementation of the formulas used in the data mapping.

6. `requirements.txt`: This file will list all the Python packages required to run the application.

Let's start with the `main.py` file:

main.py
```python
import json
from flask import Flask, request
from api_client import APIClient
from data_mapper import DataMapper

app = Flask(__name__)
api_client = APIClient()
data_mapper = DataMapper()

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    trigger_data = data_mapper.map_trigger_data(data)
    step1_data = api_client.create_order(trigger_data)
    step2_data = api_client.update_order_status(step1_data)
    step3_data = api_client.get_menu(step2_data)
    step4_data = api_client.publish_error(step3_data)
    return json.dumps(step4_data), 200

if __name__ == '__main__':
    app.run(port=5000)
```

Next, let's implement the `APIClient` class in the `api_client.py` file:

api_client.py
```python
import requests
from auth import OAuth2

class APIClient:
    def __init__(self):
        self.auth = OAuth2()

    def create_order(self, data):
        url = 'https://partners.cloudkitchens.com/v1/orders'
        headers = {'Authorization': 'Bearer ' + self.auth.get_token()}
        response = requests.post(url, headers=headers, json=data)
        return response.json()

    def update_order_status(self, data):
        url = 'https://partners.cloudkitchens.com/v1/orders/' + data['orderId']
        headers = {'Authorization': 'Bearer ' + self.auth.get_token()}
        response = requests.put(url, headers=headers, json=data)
        return response.json()

    def get_menu(self, data):
        url = 'https://partners.cloudkitchens.com/v1/menus/' + data['menuId']
        headers = {'Authorization': 'Bearer ' + self.auth.get_token()}
        response = requests.get(url, headers=headers)
        return response.json()

    def publish_error(self, data):
        url = 'https://partners.cloudkitchens.com/v1/errors'
        headers = {'Authorization': 'Bearer ' + self.auth.get_token()}
        response = requests.post(url, headers=headers, json=data)
        return response.json()
```

Now, let's implement the `OAuth2` class in the `auth.py` file:

auth.py
```python
import requests

class OAuth2:
    def get_token(self):
        url = 'https://partners.cloudkitchens.com/v1/auth/token'
        data = {'client_id': '04db98cc-0c84-47e2-b57f-bfd6329c4675'}
        response = requests.post(url, data=data)
        return response.json()['access_token']
```

Next, let's implement the `DataMapper` class in the `data_mapper.py` file:

data_mapper.py
```python
import json
from formulas import apply_formula

class DataMapper:
    def map_trigger_data(self, data):
        with open('trigger_data_mapping.json') as f:
            mapping = json.load(f)
        return self._map_data(data, mapping)

    def _map_data(self, data, mapping):
        mapped_data = {}
        for key, value in mapping.items():
            input_data = data[value['input']['sourcePath']]
            if 'formulas' in value['input']:
                for formula in value['input']['formulas']:
                    input_data = apply_formula(formula, input_data)
            mapped_data[value['output']['path']] = input_data
        return mapped_data
```

Next, let's implement the formulas in the `formulas.py` file:

formulas.py
```python
def apply_formula(formula, input_data):
    if formula['name'] == 'If, then':
        return if_then(formula['inputs']['ifThen'][0], input_data)
    elif formula['name'] == 'Substring':
        return substring(formula['inputs']['substring'], input_data)
    elif formula['name'] == 'Prepend':
        return prepend(formula['inputs']['prepend'], input_data)
    elif formula['name'] == 'Division':
        return division(formula['inputs']['division'], input_data)

def if_then(formula, input_data):
    if input_data == formula['if']['value']:
        return formula['then']['value']
    else:
        return formula['else']['value']

def substring(formula, input_data):
    return input_data[formula['startingIndex']:formula['endingIndex']]

def prepend(formula, input_data):
    return formula['prepend'] + input_data

def division(formula, input_data):
    return input_data / formula['division']
```

Finally, let's create the `requirements.txt` file:

requirements.txt
```
flask==1.1.2
requests==2.24.0
```

This completes the implementation of the application. The application can be run by executing the `main.py` file. The webhook can be triggered by sending a POST request to `http://localhost:5000/webhook` with the appropriate JSON data.