Sure, here are the tests based on the above specification. We will use pytest for writing the tests.

`test_oauth2_client.py`
```python
import pytest
from oauth2_client import OAuth2Client

def test_generate_token():
    client = OAuth2Client(client_id='test_id', client_secret='test_secret', token_url='test_url')
    token = client.generate_token()
    assert isinstance(token, str)

def test_refresh_token():
    client = OAuth2Client(client_id='test_id', client_secret='test_secret', token_url='test_url')
    client.generate_token()
    client.refresh_token()
    assert isinstance(client.token, str)
```

`test_api_integration.py`
```python
import pytest
from api_integration import APIIntegration

def test_get_menu():
    integration = APIIntegration()
    menu = integration.get_menu(store_id='test_store_id')
    assert isinstance(menu, dict)

def test_upsert_menu():
    integration = APIIntegration()
    menu = {'test': 'menu'}
    response = integration.upsert_menu(menu=menu)
    assert response.status_code == 200
```

`test_webhook_trigger.py`
```python
import pytest
from webhook_trigger import WebhookTrigger

def test_handle_webhook():
    trigger = WebhookTrigger()
    data = {'storeId': 'test_store_id'}
    trigger.handle_webhook(data=data)
    assert trigger.store_id == 'test_store_id'
```

`test_data_mapping.py`
```python
import pytest
from data_mapping import DataMapping

def test_map_data():
    mapping = DataMapping()
    data = {'test': 'data'}
    mapped_data = mapping.map_data(data=data)
    assert isinstance(mapped_data, dict)
```

`test_main.py`
```python
import pytest
from main import main

def test_main():
    assert main() is None
```

These tests cover the basic functionality of each class and function. They check that the functions return the expected types of values and that they update the state of the objects as expected.