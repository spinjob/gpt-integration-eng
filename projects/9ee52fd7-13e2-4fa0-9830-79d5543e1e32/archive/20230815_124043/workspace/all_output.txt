The application will be implemented in Node.js and will use the following libraries:

- `axios` for making HTTP requests
- `dotenv` for loading environment variables
- `jsonwebtoken` for handling JWT tokens
- `express` for setting up a server to listen for the workflow trigger

The application will consist of the following files:

- `index.js`: This is the entry point of the application. It sets up an Express server that listens for the workflow trigger and initiates the workflow steps.
- `apiClient.js`: This file contains the `APIClient` class, which is responsible for making authenticated requests to the APIs.
- `workflow.js`: This file contains the `Workflow` class, which is responsible for executing the workflow steps.
- `.env`: This file contains environment variables such as the API keys.
- `package.json`: This file contains the project metadata and dependencies.

Let's start with the `package.json` file:

`package.json`
```json
{
  "name": "api-integration",
  "version": "1.0.0",
  "description": "A Node.js application that integrates two APIs",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "axios": "^0.21.1",
    "dotenv": "^8.2.0",
    "jsonwebtoken": "^8.5.1",
    "express": "^4.17.1"
  }
}
```

Next, let's implement the `APIClient` class in `apiClient.js`:

`apiClient.js`
```javascript
const axios = require('axios');
const jwt = require('jsonwebtoken');

class APIClient {
  constructor(baseURL, clientId, clientSecret) {
    this.baseURL = baseURL;
    this.clientId = clientId;
    this.clientSecret = clientSecret;
    this.token = null;
  }

  async authenticate() {
    const payload = {
      iss: this.clientId,
      aud: this.baseURL,
      exp: Math.floor(Date.now() / 1000) + 60 * 60 // 1 hour from now
    };
    this.token = jwt.sign(payload, this.clientSecret);
  }

  async request(method, path, data = null, headers = {}) {
    if (!this.token) {
      await this.authenticate();
    }

    const url = `${this.baseURL}${path}`;
    const options = {
      method,
      url,
      headers: {
        ...headers,
        Authorization: `Bearer ${this.token}`
      }
    };

    if (data) {
      options.data = data;
    }

    const response = await axios(options);
    return response.data;
  }
}

module.exports = APIClient;
```

Next, let's implement the `Workflow` class in `workflow.js`:

`workflow.js`
```javascript
class Workflow {
  constructor(apiClient) {
    this.apiClient = apiClient;
  }

  async executeStep1(dataMapping) {
    const { input, output } = dataMapping['X-Store-Id'];
    const data = { [input.key]: input.value };
    const headers = { [output.key]: output.value };
    const response = await this.apiClient.request('GET', '/getMenu', data, headers);
    return response;
  }

  async executeStep2(dataMapping, previousResponse) {
    const data = {};
    const headers = {};

    for (const key in dataMapping) {
      const { input, output } = dataMapping[key];
      const value = previousResponse[input.path];
      if (output.in === 'body') {
        data[output.path] = value;
      } else if (output.in === 'header') {
        headers[output.path] = value;
      }
    }

    const response = await this.apiClient.request('POST', '/upsertMenu', data, headers);
    return response;
  }
}

module.exports = Workflow;
```

Finally, let's implement the entry point of the application in `index.js`:

`index.js`
```javascript
require('dotenv').config();
const express = require('express');
const APIClient = require('./apiClient');
const Workflow = require('./workflow');

const app = express();
app.use(express.json());

const apiClient = new APIClient(
  process.env.API_BASE_URL,
  process.env.API_CLIENT_ID,
  process.env.API_CLIENT_SECRET
);

const workflow = new Workflow(apiClient);

app.post('/trigger', async (req, res) => {
  try {
    const step1DataMapping = req.body.step1DataMapping;
    const step1Response = await workflow.executeStep1(step1DataMapping);

    const step2DataMapping = req.body.step2DataMapping;
    const step2Response = await workflow.executeStep2(step2DataMapping, step1Response);

    res.json(step2Response);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Server listening on port ${port}`));
```

The `.env` file should contain the following environment variables:

`.env`
```env
API_BASE_URL=https://partners.cloudkitchens.com
API_CLIENT_ID=your-client-id
API_CLIENT_SECRET=your-client-secret
PORT=3000
```

Please replace `your-client-id` and `your-client-secret` with your actual client ID and secret.