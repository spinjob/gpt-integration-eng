The tests will be written using pytest, a testing framework for Python. 

Here are the tests for each of the core classes, functions, and methods:

`test_oauth2client.py`
```python
import pytest
from oauth2client import OAuth2Client

def test_get_access_token():
    client = OAuth2Client(client_id='test', client_secret='test', token_url='https://example.com/token')
    token = client.get_access_token()
    assert 'access_token' in token

def test_refresh_access_token():
    client = OAuth2Client(client_id='test', client_secret='test', token_url='https://example.com/token')
    token = client.refresh_access_token()
    assert 'access_token' in token
```

`test_apirequest.py`
```python
import pytest
from apirequest import APIRequest

def test_get_request():
    request = APIRequest(url='https://example.com/api', headers={'Authorization': 'Bearer test'})
    response = request.get('/test')
    assert response.status_code == 200

def test_post_request():
    request = APIRequest(url='https://example.com/api', headers={'Authorization': 'Bearer test'})
    response = request.post('/test', data={'test': 'test'})
    assert response.status_code == 200
```

`test_datamapper.py`
```python
import pytest
from datamapper import DataMapper

def test_map_data():
    mapper = DataMapper(mapping_json={'test': {'input': {'in': 'body', 'sourcePath': 'test'}, 'output': {'in': 'body', 'outputPath': 'test'}}})
    data = mapper.map_data({'test': 'test'}, 'body')
    assert data == {'test': 'test'}
```

`test_workflow.py`
```python
import pytest
from workflow import Workflow

def test_execute_step():
    workflow = Workflow(steps=[{'api': 'test', 'method': 'get', 'path': '/test', 'data_mapping': {'test': {'input': {'in': 'body', 'sourcePath': 'test'}, 'output': {'in': 'body', 'outputPath': 'test'}}}}])
    workflow.execute_step(0)
    assert workflow.data == {'test': 'test'}
```

`test_functions.py`
```python
import pytest
from functions import get_menu, upsert_menu

def test_get_menu():
    data = get_menu('test')
    assert 'menu' in data

def test_upsert_menu():
    response = upsert_menu('test', {'menu': 'test'})
    assert response.status_code == 200
```

Note: These tests are simplified and assume that the functions and methods return the expected data. In a real-world scenario, you would need to mock the responses from the APIs and handle different edge cases.