Based on the provided information, we will need to create a Node.js application that integrates two APIs using OAuth2 authentication. The application will have two main steps: 

1. Fetching a menu from the first API (Marketplace API)
2. Updating the menu on the second API (Point-of-Sale API) with the fetched data.

We will need the following core classes and functions:

1. `OAuth2Client`: This class will handle the OAuth2 authentication for both APIs. It will have methods for getting and refreshing access tokens.
2. `MarketplaceAPI`: This class will handle interactions with the Marketplace API. It will have a method `getMenu` for fetching the menu.
3. `PointOfSaleAPI`: This class will handle interactions with the Point-of-Sale API. It will have a method `upsertMenu` for updating the menu.
4. `DataMapper`: This class will handle the mapping of data between the two APIs. It will have a method `mapMenuData` for mapping the menu data from the Marketplace API to the format required by the Point-of-Sale API.
5. `main`: This function will orchestrate the whole process. It will call the necessary methods from the above classes to fetch the menu from the Marketplace API, map the data, and update the menu on the Point-of-Sale API.

Now, let's implement these classes and functions.

First, we will create a `package.json` file to define our Node.js project and its dependencies.

package.json
```json
{
  "name": "api-integration",
  "version": "1.0.0",
  "description": "Integrates two APIs using OAuth2 authentication",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "axios": "^0.21.1",
    "dotenv": "^8.2.0"
  }
}
```

Next, we will create a `.env` file to store our sensitive data such as client IDs, client secrets, and API keys.

.env
```plaintext
MARKETPLACE_API_CLIENT_ID=your_marketplace_api_client_id
MARKETPLACE_API_CLIENT_SECRET=your_marketplace_api_client_secret
POINT_OF_SALE_API_CLIENT_ID=your_point_of_sale_api_client_id
POINT_OF_SALE_API_CLIENT_SECRET=your_point_of_sale_api_client_secret
```

Now, let's implement the `OAuth2Client` class.

oauth2Client.js
```javascript
const axios = require('axios');

class OAuth2Client {
  constructor(clientId, clientSecret, tokenUrl) {
    this.clientId = clientId;
    this.clientSecret = clientSecret;
    this.tokenUrl = tokenUrl;
    this.accessToken = null;
    this.refreshToken = null;
  }

  async getAccessToken() {
    if (!this.accessToken) {
      await this.refreshAccessToken();
    }
    return this.accessToken;
  }

  async refreshAccessToken() {
    const response = await axios.post(this.tokenUrl, {
      client_id: this.clientId,
      client_secret: this.clientSecret,
      grant_type: 'client_credentials'
    });
    this.accessToken = response.data.access_token;
    this.refreshToken = response.data.refresh_token;
  }
}

module.exports = OAuth2Client;
```

Next, we will implement the `MarketplaceAPI` class.

marketplaceAPI.js
```javascript
const axios = require('axios');

class MarketplaceAPI {
  constructor(oauth2Client, baseUrl) {
    this.oauth2Client = oauth2Client;
    this.baseUrl = baseUrl;
  }

  async getMenu(storeId) {
    const accessToken = await this.oauth2Client.getAccessToken();
    const response = await axios.get(`${this.baseUrl}/menu`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'X-Store-Id': storeId
      }
    });
    return response.data;
  }
}

module.exports = MarketplaceAPI;
```

Next, we will implement the `PointOfSaleAPI` class.

pointOfSaleAPI.js
```javascript
const axios = require('axios');

class PointOfSaleAPI {
  constructor(oauth2Client, baseUrl) {
    this.oauth2Client = oauth2Client;
    this.baseUrl = baseUrl;
  }

  async upsertMenu(menuData) {
    const accessToken = await this.oauth2Client.getAccessToken();
    await axios.post(`${this.baseUrl}/menu`, menuData, {
      headers: {
        'Authorization': `Bearer ${accessToken}`
      }
    });
  }
}

module.exports = PointOfSaleAPI;
```

Next, we will implement the `DataMapper` class.

dataMapper.js
```javascript
class DataMapper {
  mapMenuData(sourceData) {
    // Implement the mapping logic based on the provided Data Mapping JSON
    // This is a placeholder implementation and needs to be replaced with the actual logic
    return sourceData;
  }
}

module.exports = DataMapper;
```

Finally, we will implement the `main` function in our entry point file.

index.js
```javascript
require('dotenv').config();
const OAuth2Client = require('./oauth2Client');
const MarketplaceAPI = require('./marketplaceAPI');
const PointOfSaleAPI = require('./pointOfSaleAPI');
const DataMapper = require('./dataMapper');

const marketplaceClient = new OAuth2Client(
  process.env.MARKETPLACE_API_CLIENT_ID,
  process.env.MARKETPLACE_API_CLIENT_SECRET,
  'https://partners.cloudkitchens.com/oauth/token'
);

const pointOfSaleClient = new OAuth2Client(
  process.env.POINT_OF_SALE_API_CLIENT_ID,
  process.env.POINT_OF_SALE_API_CLIENT_SECRET,
  'https://partners.cloudkitchens.com/oauth/token'
);

const marketplaceAPI = new MarketplaceAPI(marketplaceClient, 'https://partners.cloudkitchens.com');
const pointOfSaleAPI = new PointOfSaleAPI(pointOfSaleClient, 'https://partners.cloudkitchens.com');
const dataMapper = new DataMapper();

async function main() {
  const storeId = 'd6cec45b-f9ec-4658-b593-7cd355d86a93';
  const menuData = await marketplaceAPI.getMenu(storeId);
  const mappedData = dataMapper.mapMenuData(menuData);
  await pointOfSaleAPI.upsertMenu(mappedData);
}

main().catch(console.error);
```

This completes the implementation of the application. The application can be run by executing `npm start` in the terminal.