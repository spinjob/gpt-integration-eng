Based on the provided information, we will need to create a Node.js application that integrates two APIs using OAuth2 authentication. The application will perform two steps: 

1. Get a menu from the Marketplace API.
2. Upsert the menu to the Point-of-Sale API.

The application will need to handle OAuth2 authentication for both APIs, make HTTP requests, and map data between the APIs according to the provided mapping JSON.

Here are the core classes, functions, and methods that will be necessary:

1. `OAuth2Client` class: This class will handle OAuth2 authentication for an API. It will have methods to get an access token and refresh it when necessary.

2. `ApiRequest` class: This class will handle making HTTP requests to an API. It will use an instance of `OAuth2Client` to handle authentication.

3. `DataMapper` class: This class will handle mapping data between APIs according to the provided mapping JSON. It will have methods to map data from a source object to a target object.

4. `Workflow` class: This class will handle the overall workflow of the application. It will use instances of `ApiRequest` and `DataMapper` to perform the steps of the workflow.

5. `main` function: This is the entry point of the application. It will create an instance of `Workflow` and run it.

Now, let's implement these classes and functions in code.

`package.json`
```json
{
  "name": "api-integration",
  "version": "1.0.0",
  "description": "Integrates two APIs using OAuth2 authentication",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "axios": "^0.21.1",
    "dotenv": "^8.2.0"
  }
}
```

`index.js`
```javascript
const OAuth2Client = require('./OAuth2Client');
const ApiRequest = require('./ApiRequest');
const DataMapper = require('./DataMapper');
const Workflow = require('./Workflow');

async function main() {
  const marketplaceClient = new OAuth2Client(
    process.env.MARKETPLACE_CLIENT_ID,
    process.env.MARKETPLACE_CLIENT_SECRET,
    'https://partners.cloudkitchens.com/oauth/token'
  );

  const posClient = new OAuth2Client(
    process.env.POS_CLIENT_ID,
    process.env.POS_CLIENT_SECRET,
    'https://partners.cloudkitchens.com/oauth/token'
  );

  const getMenuRequest = new ApiRequest(
    marketplaceClient,
    'https://partners.cloudkitchens.com/api/menus'
  );

  const upsertMenuRequest = new ApiRequest(
    posClient,
    'https://partners.cloudkitchens.com/api/menus'
  );

  const dataMapper = new DataMapper();

  const workflow = new Workflow(getMenuRequest, upsertMenuRequest, dataMapper);

  await workflow.run();
}

main().catch(console.error);
```

`OAuth2Client.js`
```javascript
const axios = require('axios');

class OAuth2Client {
  constructor(clientId, clientSecret, tokenUrl) {
    this.clientId = clientId;
    this.clientSecret = clientSecret;
    this.tokenUrl = tokenUrl;
    this.token = null;
  }

  async getAccessToken() {
    if (!this.token) {
      const response = await axios.post(this.tokenUrl, {
        client_id: this.clientId,
        client_secret: this.clientSecret,
        grant_type: 'client_credentials'
      });

      this.token = response.data.access_token;
    }

    return this.token;
  }
}

module.exports = OAuth2Client;
```

`ApiRequest.js`
```javascript
const axios = require('axios');

class ApiRequest {
  constructor(oauth2Client, url) {
    this.oauth2Client = oauth2Client;
    this.url = url;
  }

  async send(method, data) {
    const token = await this.oauth2Client.getAccessToken();

    const response = await axios({
      method,
      url: this.url,
      headers: {
        Authorization: `Bearer ${token}`
      },
      data
    });

    return response.data;
  }
}

module.exports = ApiRequest;
```

`DataMapper.js`
```javascript
class DataMapper {
  map(source, mapping) {
    const target = {};

    for (const [key, value] of Object.entries(mapping)) {
      const sourceValue = this.getValue(source, value.input.sourcePath);
      this.setValue(target, value.output.path, sourceValue);
    }

    return target;
  }

  getValue(object, path) {
    return path.split('.').reduce((obj, key) => obj[key], object);
  }

  setValue(object, path, value) {
    const keys = path.split('.');
    keys.slice(0, -1).reduce((obj, key) => obj[key] = obj[key] || {}, object)[keys.pop()] = value;
  }
}

module.exports = DataMapper;
```

`Workflow.js`
```javascript
class Workflow {
  constructor(getMenuRequest, upsertMenuRequest, dataMapper) {
    this.getMenuRequest = getMenuRequest;
    this.upsertMenuRequest = upsertMenuRequest;
    this.dataMapper = dataMapper;
  }

  async run() {
    const menu = await this.getMenuRequest.send('get');
    const mappedMenu = this.dataMapper.map(menu, mappingJson);
    await this.upsertMenuRequest.send('post', mappedMenu);
  }
}

module.exports = Workflow;
```

In this code, `OAuth2Client` handles OAuth2 authentication, `ApiRequest` makes HTTP requests, `DataMapper` maps data between APIs, and `Workflow` performs the steps of the workflow. The `main` function in `index.js` is the entry point of the application. It creates instances of these classes and runs the workflow.

The `package.json` file lists the dependencies of the application: `axios` for making HTTP requests and `dotenv` for loading environment variables.

Before running the application, you need to set the following environment variables: `MARKETPLACE_CLIENT_ID`, `MARKETPLACE_CLIENT_SECRET`, `POS_CLIENT_ID`, and `POS_CLIENT_SECRET`. These are the client IDs and secrets for OAuth2 authentication with the Marketplace API and the Point-of-Sale API.

You can set these environment variables in a `.env` file in the root directory of the project:

`.env`
```env
MARKETPLACE_CLIENT_ID=your_marketplace_client_id
MARKETPLACE_CLIENT_SECRET=your_marketplace_client_secret
POS_CLIENT_ID=your_pos_client_id
POS_CLIENT_SECRET=your_pos_client_secret
```

To run the application, use the `start` script defined in `package.json`:

```bash
npm start
```

This will start the application and run the workflow.