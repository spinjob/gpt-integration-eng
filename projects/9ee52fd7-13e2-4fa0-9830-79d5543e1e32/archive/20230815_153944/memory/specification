Program Specification:

The program is a Python application that integrates two APIs: the Marketplace API and the Point-of-Sale API. The application will be triggered by a webhook called menuPublishWebhook from the Marketplace API. Upon receiving the webhook, the application will perform a series of HTTP requests to both APIs according to a predefined workflow.

Features:

1. Webhook Listener: The application should have a feature to listen for incoming webhooks from the Marketplace API. The webhook will be a POST request to a configured URL.

2. OAuth2 Authentication: The application should be able to authenticate with both APIs using the OAuth2 client credentials flow. The application should be able to request and refresh access tokens as needed.

3. HTTP Request Handling: The application should be able to perform HTTP requests to both APIs. The requests will be defined by a series of workflow steps, each of which will be an HTTP request to one of the APIs.

4. Data Mapping: The application should be able to map and adapt data from the webhook request body or previous HTTP request response bodies to the parameters or properties of the current HTTP request. The mapping instructions will be provided in a JSON format.

Core Classes, Functions, and Methods:

1. `WebhookListener`: This class will handle incoming webhooks from the Marketplace API.
    - `listen()`: This method will start the webhook listener.

2. `OAuth2Client`: This class will handle OAuth2 authentication with both APIs.
    - `request_token(api_id: str)`: This method will request an access token from the specified API.
    - `refresh_token(api_id: str)`: This method will refresh the access token for the specified API.

3. `APIRequestHandler`: This class will handle HTTP requests to both APIs.
    - `perform_request(api_id: str, request_data: dict)`: This method will perform an HTTP request to the specified API with the provided request data.

4. `DataMapper`: This class will handle data mapping between the webhook request body or previous HTTP request response bodies and the current HTTP request.
    - `map_data(mapping_instructions: dict, source_data: dict)`: This method will map data from the source data according to the mapping instructions.

5. `WorkflowManager`: This class will manage the execution of the workflow steps.
    - `execute_workflow(webhook_data: dict)`: This method will execute the workflow steps using the provided webhook data.

6. `main()`: This function will start the application. It will initialize the `WebhookListener`, `OAuth2Client`, `APIRequestHandler`, `DataMapper`, and `WorkflowManager` and start the webhook listener.