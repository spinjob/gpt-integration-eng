Assumptions:
1. We are creating a simple Python application that fetches data from an API, processes it, and stores it in a database.
2. The application will be structured using an MVC (Model-View-Controller) architecture.
3. The application will use the requests library to fetch data from the API.
4. The application will use SQLite as the database.
5. The application will use SQLAlchemy as the ORM (Object-Relational Mapping) library.
6. The application will use pytest for testing.

Core Classes, Functions, Methods:
1. `main.py`: This is the entry point of the application. It will contain the main function which will coordinate the fetching, processing, and storing of data.
2. `api.py`: This file will contain the `Api` class which will be responsible for fetching data from the API.
3. `model.py`: This file will contain the `Database` and `Data` classes. The `Database` class will be responsible for all database operations. The `Data` class will represent the data model.
4. `controller.py`: This file will contain the `Controller` class which will be responsible for processing the data.
5. `test.py`: This file will contain tests for the application.

Now, let's write the code for each file.

main.py
```python
from api import Api
from model import Database
from controller import Controller

def main():
    # Create instances of Api, Database, and Controller
    api = Api()
    db = Database()
    controller = Controller()

    # Fetch data from API
    data = api.fetch_data()

    # Process data
    processed_data = controller.process_data(data)

    # Store data in database
    db.store_data(processed_data)

if __name__ == "__main__":
    main()
```

api.py
```python
import requests

class Api:
    def __init__(self, url="https://api.example.com/data"):
        self.url = url

    def fetch_data(self):
        response = requests.get(self.url)
        return response.json()
```

model.py
```python
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Data(Base):
    __tablename__ = 'data'

    id = Column(Integer, primary_key=True)
    name = Column(String)
    value = Column(String)

class Database:
    def __init__(self, db_url="sqlite:///data.db"):
        self.engine = create_engine(db_url)
        Base.metadata.create_all(self.engine)
        self.Session = sessionmaker(bind=self.engine)

    def store_data(self, data):
        session = self.Session()
        for item in data:
            data_item = Data(name=item['name'], value=item['value'])
            session.add(data_item)
        session.commit()
```

controller.py
```python
class Controller:
    def process_data(self, data):
        # For simplicity, let's assume the processing involves filtering out data items where value is None
        return [item for item in data if item['value'] is not None]
```

test.py
```python
import pytest
from main import main
from api import Api
from model import Database
from controller import Controller

def test_main():
    main()

def test_api():
    api = Api()
    assert api.fetch_data() is not None

def test_database():
    db = Database()
    assert db.store_data([{'name': 'test', 'value': 'test'}]) is None

def test_controller():
    controller = Controller()
    assert controller.process_data([{'name': 'test', 'value': None}, {'name': 'test', 'value': 'test'}]) == [{'name': 'test', 'value': 'test'}]
```

requirements.txt
```plaintext
requests
sqlalchemy
pytest
```

This completes the Python application. The application fetches data from an API, processes it, and stores it in a database. The application is structured using an MVC architecture and uses the requests library to fetch data from the API, SQLite as the database, SQLAlchemy as the ORM library, and pytest for testing.