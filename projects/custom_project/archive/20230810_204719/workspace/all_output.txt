Assumptions:
1. We are creating a Python application.
2. The application is a simple command-line calculator that can perform basic arithmetic operations (addition, subtraction, multiplication, and division).
3. The application will be structured using Object-Oriented Programming (OOP) principles.
4. The application will be packaged and distributed using setuptools.
5. The application will have unit tests using pytest.

Core Classes, Functions, and Methods:
1. Calculator class: This is the main class that performs the arithmetic operations.
   - add method: Adds two numbers.
   - subtract method: Subtracts one number from another.
   - multiply method: Multiplies two numbers.
   - divide method: Divides one number by another.
2. main function: This is the entry point of the application. It parses command-line arguments and calls the appropriate Calculator method.
3. test_calculator class: This class contains unit tests for the Calculator class.

Now, let's write the code for each file.

calculator.py
```python
class Calculator:
    """A simple calculator."""

    @staticmethod
    def add(x, y):
        """Add two numbers."""
        return x + y

    @staticmethod
    def subtract(x, y):
        """Subtract y from x."""
        return x - y

    @staticmethod
    def multiply(x, y):
        """Multiply two numbers."""
        return x * y

    @staticmethod
    def divide(x, y):
        """Divide x by y."""
        if y == 0:
            raise ValueError("Cannot divide by zero")
        return x / y
```

main.py
```python
import argparse
from calculator import Calculator

def main():
    """The entry point of the application."""
    parser = argparse.ArgumentParser(description="A simple calculator.")
    parser.add_argument("operation", choices=["add", "subtract", "multiply", "divide"])
    parser.add_argument("x", type=float)
    parser.add_argument("y", type=float)
    args = parser.parse_args()

    calculator = Calculator()

    if args.operation == "add":
        result = calculator.add(args.x, args.y)
    elif args.operation == "subtract":
        result = calculator.subtract(args.x, args.y)
    elif args.operation == "multiply":
        result = calculator.multiply(args.x, args.y)
    elif args.operation == "divide":
        result = calculator.divide(args.x, args.y)

    print(result)

if __name__ == "__main__":
    main()
```

test_calculator.py
```python
import pytest
from calculator import Calculator

class TestCalculator:
    """Unit tests for the Calculator class."""

    @pytest.mark.parametrize("x, y, expected", [(1, 2, 3), (-1, -2, -3), (0, 0, 0)])
    def test_add(self, x, y, expected):
        """Test the add method."""
        assert Calculator.add(x, y) == expected

    @pytest.mark.parametrize("x, y, expected", [(1, 2, -1), (-1, -2, 1), (0, 0, 0)])
    def test_subtract(self, x, y, expected):
        """Test the subtract method."""
        assert Calculator.subtract(x, y) == expected

    @pytest.mark.parametrize("x, y, expected", [(1, 2, 2), (-1, -2, 2), (0, 0, 0)])
    def test_multiply(self, x, y, expected):
        """Test the multiply method."""
        assert Calculator.multiply(x, y) == expected

    @pytest.mark.parametrize("x, y, expected", [(1, 2, 0.5), (-1, -2, 0.5), (1, 0, None)])
    def test_divide(self, x, y, expected):
        """Test the divide method."""
        if expected is None:
            with pytest.raises(ValueError):
                Calculator.divide(x, y)
        else:
            assert Calculator.divide(x, y) == expected
```

setup.py
```python
from setuptools import setup, find_packages

setup(
    name="calculator",
    version="0.1",
    packages=find_packages(),
    entry_points={
        "console_scripts": [
            "calculator = main:main",
        ],
    },
    install_requires=[],
    tests_require=["pytest"],
)
```

requirements.txt
```plaintext
pytest
```

To run the application, you can use the command `python -m calculator add 1 2`. To run the tests, you can use the command `pytest`.