[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}}}, {"type": "human", "data": {"content": "Make your own assumptions and state them explicitly before starting", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "Summary of areas needing clarification:\n1. What assumptions should be made?\n2. What is the context or topic for these assumptions?\n3. What is the purpose or goal of making these assumptions?\n\nClarifying question: Could you please provide more details on the context or topic for which these assumptions should be made?", "additional_kwargs": {}, "example": false}}, {"type": "human", "data": {"content": "Please now remember the steps:\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nFirst lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nPlease note that the code should be fully functional. No placeholders.\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc. The code should be fully functional. Make sure that code in different files are compatible with each other.\nBefore you finish, double check that all parts of the architecture is present in the files.\n", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "Assumptions:\n1. We are creating a simple Python application that fetches data from an API and processes it.\n2. The application will be structured in a modular way, with separate files for different functionalities.\n3. The application will use the requests library to fetch data from the API.\n4. The application will use the json library to parse the fetched data.\n5. The application will use pytest for testing.\n\nCore Classes, Functions, Methods:\n1. `main.py`: This is the entry point of the application. It will contain the main function which will call other functions to fetch and process data.\n2. `api.py`: This file will contain the `fetch_data` function which will be responsible for fetching data from the API.\n3. `processor.py`: This file will contain the `process_data` function which will be responsible for processing the fetched data.\n4. `test.py`: This file will contain the test cases for the application.\n\nNow, let's write the code for each file.\n\nmain.py\n```python\nimport api\nimport processor\n\ndef main():\n    # Fetch data from API\n    data = api.fetch_data()\n    \n    # Process the fetched data\n    processed_data = processor.process_data(data)\n    \n    print(processed_data)\n\nif __name__ == \"__main__\":\n    main()\n```\n\napi.py\n```python\nimport requests\nimport json\n\ndef fetch_data():\n    # Fetch data from API\n    response = requests.get('https://api.example.com/data')\n    \n    # Parse the JSON data\n    data = json.loads(response.text)\n    \n    return data\n```\n\nprocessor.py\n```python\ndef process_data(data):\n    # Process the data\n    processed_data = [item['field'] for item in data]\n    \n    return processed_data\n```\n\ntest.py\n```python\nimport pytest\nimport api\nimport processor\n\ndef test_fetch_data():\n    data = api.fetch_data()\n    assert isinstance(data, list)\n\ndef test_process_data():\n    data = [{'field': 'value'}]\n    processed_data = processor.process_data(data)\n    assert processed_data == ['value']\n```\n\nrequirements.txt\n```\nrequests==2.25.1\npytest==6.2.4\n```\n\nThis is a simple Python application that fetches data from an API and processes it. The application is structured in a modular way, with separate files for different functionalities. The `main.py` file is the entry point of the application. It calls the `fetch_data` function from the `api.py` file to fetch data from the API, and the `process_data` function from the `processor.py` file to process the fetched data. The `test.py` file contains the test cases for the application. The `requirements.txt` file lists the dependencies of the application.", "additional_kwargs": {}, "example": false}}]