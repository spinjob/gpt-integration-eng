[{"type": "system", "data": {"content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallel if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n", "additional_kwargs": {}}}, {"type": "human", "data": {"content": "Information about the codebase:\n\nThe core classes and functions that will be necessary for this task are:\n\n1. `FileOrganizer`: This class will be responsible for the main functionality of the tool. It will have methods to scan the directory, identify file types, and move files to corresponding folders.\n\n2. `get_file_type`: This function will be used to determine the file type based on the file extension.\n\n3. `move_file`: This function will be used to move a file from one directory to another.\n\n4. `main`: This function will be the entry point of the CLI tool. It will parse command line arguments and call the appropriate methods of the `FileOrganizer` class.\n\nNow, let's write the code for each file.\n\n**requirements.txt**\n```plaintext\nclick==7.1.2\n```\n\n**file_organizer.py**\n```python\nimport os\nimport shutil\nimport click\n\nclass FileOrganizer:\n    def __init__(self, directory):\n        self.directory = directory\n\n    def get_file_type(self, filename):\n        \"\"\"\n        Determine the file type based on the file extension.\n        \"\"\"\n        _, ext = os.path.splitext(filename)\n        ext = ext.lower()\n\n        if ext in ['.jpg', '.png', '.gif']:\n            return 'images'\n        elif ext in ['.doc', '.docx', '.pdf']:\n            return 'documents'\n        elif ext in ['.mp3', '.wav', '.flac']:\n            return 'audio'\n        else:\n            return 'others'\n\n    def move_file(self, filename, file_type):\n        \"\"\"\n        Move a file to the corresponding folder based on its file type.\n        \"\"\"\n        src = os.path.join(self.directory, filename)\n        dest_dir = os.path.join(self.directory, file_type)\n        os.makedirs(dest_dir, exist_ok=True)\n        dest = os.path.join(dest_dir, filename)\n        shutil.move(src, dest)\n\n    def organize(self):\n        \"\"\"\n        Organize files in the directory.\n        \"\"\"\n        for filename in os.listdir(self.directory):\n            if os.path.isfile(os.path.join(self.directory, filename)):\n                file_type = self.get_file_type(filename)\n                self.move_file(filename, file_type)\n\n@click.command()\n@click.argument('directory')\ndef main(directory):\n    \"\"\"\n    The entry point of the CLI tool.\n    \"\"\"\n    organizer = FileOrganizer(directory)\n    organizer.organize()\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis CLI tool can be run from the command line by passing the directory as an argument. For example:\n\n```bash\npython file_organizer.py /path/to/directory\n```\n\nThis will organize the files in the specified directory into 'images', 'documents', 'audio', and 'others' folders based on their file types.", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "To install dependencies, run:\n\n```bash\npip install -r requirements.txt\n```\n\nTo run the codebase, use:\n\n```bash\npython file_organizer.py .\n```\n\nThis will organize the files in the current directory.", "additional_kwargs": {}, "example": false}}]