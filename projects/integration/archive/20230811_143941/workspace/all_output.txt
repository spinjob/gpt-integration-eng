The core classes and functions that will be necessary for this task are:

1. `FileOrganizer`: This class will be responsible for the main functionality of the tool. It will have methods to scan the directory, identify file types, create corresponding folders, and move files.

2. `main`: This function will be the entry point of the CLI tool. It will parse command line arguments and call the appropriate methods of the `FileOrganizer` class.

3. `get_file_type`: This function will determine the type of a file based on its extension.

4. `move_file`: This function will move a file from one directory to another.

5. `create_folder`: This function will create a new folder if it doesn't already exist.

Now, let's start with the entry point file, `main.py`.

main.py
```python
import argparse
from file_organizer import FileOrganizer

def main():
    parser = argparse.ArgumentParser(description='Organize files in a directory based on their types.')
    parser.add_argument('directory', type=str, help='The directory to organize.')
    args = parser.parse_args()

    organizer = FileOrganizer(args.directory)
    organizer.organize()

if __name__ == "__main__":
    main()
```

Next, let's implement the `FileOrganizer` class in `file_organizer.py`.

file_organizer.py
```python
import os
from file_utils import get_file_type, move_file, create_folder

class FileOrganizer:
    def __init__(self, directory):
        self.directory = directory

    def organize(self):
        for filename in os.listdir(self.directory):
            file_type = get_file_type(filename)
            target_folder = os.path.join(self.directory, file_type)
            create_folder(target_folder)
            move_file(os.path.join(self.directory, filename), target_folder)
```

Finally, let's implement the utility functions in `file_utils.py`.

file_utils.py
```python
import os
import shutil
import mimetypes

def get_file_type(filename):
    # Use the mimetypes module to get the file type based on the extension
    type_info = mimetypes.guess_type(filename)
    if type_info[0] is None:
        return 'Unknown'
    return type_info[0].split('/')[0]

def move_file(source, destination):
    shutil.move(source, destination)

def create_folder(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)
```

The `requirements.txt` file for this project would look like this:

requirements.txt
```plaintext
argparse==1.4.0
```

This project doesn't have any external dependencies other than the standard library, so the `argparse` module is the only one listed in the `requirements.txt` file.