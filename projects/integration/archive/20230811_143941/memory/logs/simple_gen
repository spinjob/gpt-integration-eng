[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}}}, {"type": "human", "data": {"content": "Create a file organizer CLI tool in Python that sorts files in a directory based on their file types (e.g., images, documents, audio) and moves them into corresponding folders.", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "The core classes and functions that will be necessary for this task are:\n\n1. `FileOrganizer`: This class will be responsible for the main functionality of the tool. It will have methods to scan the directory, identify file types, create corresponding folders, and move files.\n\n2. `main`: This function will be the entry point of the CLI tool. It will parse command line arguments and call the appropriate methods of the `FileOrganizer` class.\n\n3. `get_file_type`: This function will determine the type of a file based on its extension.\n\n4. `move_file`: This function will move a file from one directory to another.\n\n5. `create_folder`: This function will create a new folder if it doesn't already exist.\n\nNow, let's start with the entry point file, `main.py`.\n\nmain.py\n```python\nimport argparse\nfrom file_organizer import FileOrganizer\n\ndef main():\n    parser = argparse.ArgumentParser(description='Organize files in a directory based on their types.')\n    parser.add_argument('directory', type=str, help='The directory to organize.')\n    args = parser.parse_args()\n\n    organizer = FileOrganizer(args.directory)\n    organizer.organize()\n\nif __name__ == \"__main__\":\n    main()\n```\n\nNext, let's implement the `FileOrganizer` class in `file_organizer.py`.\n\nfile_organizer.py\n```python\nimport os\nfrom file_utils import get_file_type, move_file, create_folder\n\nclass FileOrganizer:\n    def __init__(self, directory):\n        self.directory = directory\n\n    def organize(self):\n        for filename in os.listdir(self.directory):\n            file_type = get_file_type(filename)\n            target_folder = os.path.join(self.directory, file_type)\n            create_folder(target_folder)\n            move_file(os.path.join(self.directory, filename), target_folder)\n```\n\nFinally, let's implement the utility functions in `file_utils.py`.\n\nfile_utils.py\n```python\nimport os\nimport shutil\nimport mimetypes\n\ndef get_file_type(filename):\n    # Use the mimetypes module to get the file type based on the extension\n    type_info = mimetypes.guess_type(filename)\n    if type_info[0] is None:\n        return 'Unknown'\n    return type_info[0].split('/')[0]\n\ndef move_file(source, destination):\n    shutil.move(source, destination)\n\ndef create_folder(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n```\n\nThe `requirements.txt` file for this project would look like this:\n\nrequirements.txt\n```plaintext\nargparse==1.4.0\n```\n\nThis project doesn't have any external dependencies other than the standard library, so the `argparse` module is the only one listed in the `requirements.txt` file.", "additional_kwargs": {}, "example": false}}]