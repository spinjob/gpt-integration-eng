[{"type": "system", "data": {"content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallel if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n", "additional_kwargs": {}}}, {"type": "human", "data": {"content": "Information about the codebase:\n\nThe core classes and functions that will be necessary for this task are:\n\n1. `FileOrganizer`: This is the main class that will handle the organization of files. It will have methods to identify file types and move files to corresponding folders.\n\n2. `get_file_type`: This function will identify the type of a file based on its extension.\n\n3. `move_file`: This function will move a file from its current location to a new location.\n\n4. `organize`: This function will be the entry point of the application. It will take a directory as input and use the `FileOrganizer` class to organize the files in the directory.\n\nNow, let's write the code for each of these components.\n\n`requirements.txt`\n```plaintext\nclick==7.1.2\n```\n\n`file_organizer.py`\n```python\nimport os\nimport shutil\nfrom typing import Dict\n\nclass FileOrganizer:\n    def __init__(self, directory: str):\n        self.directory = directory\n        self.file_types: Dict[str, str] = {\n            'images': ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.ico'],\n            'documents': ['.doc', '.docx', '.pdf', '.txt', '.xls', '.xlsx', '.ppt', '.pptx'],\n            'audio': ['.mp3', '.wav', '.ogg', '.flac', '.aac']\n        }\n\n    def get_file_type(self, file_name: str) -> str:\n        \"\"\"\n        Identify the type of a file based on its extension.\n        \"\"\"\n        _, extension = os.path.splitext(file_name)\n        for file_type, extensions in self.file_types.items():\n            if extension in extensions:\n                return file_type\n        return 'others'\n\n    def move_file(self, file_name: str, file_type: str) -> None:\n        \"\"\"\n        Move a file from its current location to a new location.\n        \"\"\"\n        source = os.path.join(self.directory, file_name)\n        destination = os.path.join(self.directory, file_type, file_name)\n        os.makedirs(os.path.dirname(destination), exist_ok=True)\n        shutil.move(source, destination)\n\n    def organize(self) -> None:\n        \"\"\"\n        Organize the files in the directory.\n        \"\"\"\n        for file_name in os.listdir(self.directory):\n            if os.path.isfile(os.path.join(self.directory, file_name)):\n                file_type = self.get_file_type(file_name)\n                self.move_file(file_name, file_type)\n```\n\n`cli.py`\n```python\nimport click\nfrom file_organizer import FileOrganizer\n\n@click.command()\n@click.argument('directory')\ndef organize(directory: str) -> None:\n    \"\"\"\n    Organize the files in the directory.\n    \"\"\"\n    organizer = FileOrganizer(directory)\n    organizer.organize()\n\nif __name__ == '__main__':\n    organize()\n```\n\nTo run the application, you can use the command `python cli.py <directory>`, replacing `<directory>` with the path to the directory you want to organize.", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "```bash\n# a) Install dependencies\npython3 -m venv env\nsource env/bin/activate\npip install -r requirements.txt\n\n# b) Run all necessary parts of the codebase\npython cli.py .\n```", "additional_kwargs": {}, "example": false}}]