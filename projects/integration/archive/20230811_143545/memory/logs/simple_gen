[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}}}, {"type": "human", "data": {"content": "Create a file organizer CLI tool in Python that sorts files in a directory based on their file types (e.g., images, documents, audio) and moves them into corresponding folders.", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "The core classes and functions that will be necessary for this task are:\n\n1. `FileOrganizer`: This is the main class that will handle the organization of files. It will have methods to identify file types and move files to corresponding folders.\n\n2. `get_file_type`: This function will identify the type of a file based on its extension.\n\n3. `move_file`: This function will move a file from its current location to a new location.\n\n4. `organize`: This function will be the entry point of the application. It will take a directory as input and use the `FileOrganizer` class to organize the files in the directory.\n\nNow, let's write the code for each of these components.\n\n`requirements.txt`\n```plaintext\nclick==7.1.2\n```\n\n`file_organizer.py`\n```python\nimport os\nimport shutil\nfrom typing import Dict\n\nclass FileOrganizer:\n    def __init__(self, directory: str):\n        self.directory = directory\n        self.file_types: Dict[str, str] = {\n            'images': ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.ico'],\n            'documents': ['.doc', '.docx', '.pdf', '.txt', '.xls', '.xlsx', '.ppt', '.pptx'],\n            'audio': ['.mp3', '.wav', '.ogg', '.flac', '.aac']\n        }\n\n    def get_file_type(self, file_name: str) -> str:\n        \"\"\"\n        Identify the type of a file based on its extension.\n        \"\"\"\n        _, extension = os.path.splitext(file_name)\n        for file_type, extensions in self.file_types.items():\n            if extension in extensions:\n                return file_type\n        return 'others'\n\n    def move_file(self, file_name: str, file_type: str) -> None:\n        \"\"\"\n        Move a file from its current location to a new location.\n        \"\"\"\n        source = os.path.join(self.directory, file_name)\n        destination = os.path.join(self.directory, file_type, file_name)\n        os.makedirs(os.path.dirname(destination), exist_ok=True)\n        shutil.move(source, destination)\n\n    def organize(self) -> None:\n        \"\"\"\n        Organize the files in the directory.\n        \"\"\"\n        for file_name in os.listdir(self.directory):\n            if os.path.isfile(os.path.join(self.directory, file_name)):\n                file_type = self.get_file_type(file_name)\n                self.move_file(file_name, file_type)\n```\n\n`cli.py`\n```python\nimport click\nfrom file_organizer import FileOrganizer\n\n@click.command()\n@click.argument('directory')\ndef organize(directory: str) -> None:\n    \"\"\"\n    Organize the files in the directory.\n    \"\"\"\n    organizer = FileOrganizer(directory)\n    organizer.organize()\n\nif __name__ == '__main__':\n    organize()\n```\n\nTo run the application, you can use the command `python cli.py <directory>`, replacing `<directory>` with the path to the directory you want to organize.", "additional_kwargs": {}, "example": false}}]