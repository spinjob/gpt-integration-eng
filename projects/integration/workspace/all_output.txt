Let's start by creating the main entry point file, `main.py`. This file will contain the main function that will be executed to run the integration.

main.py
```python
from api_integration import APIIntegration
from schedule import Scheduler

def main():
    # Create an instance of the APIIntegration class
    integration = APIIntegration()

    # Create an instance of the Scheduler class
    scheduler = Scheduler()

    # Schedule the integration to run at the specified times
    scheduler.schedule(integration.run, 'weekly', days=['Monday', 'Thursday', 'Saturday'], time='19:00')

if __name__ == "__main__":
    main()
```

Next, we will create the `api_integration.py` file. This file will contain the `APIIntegration` class, which will handle the integration between the two APIs.

api_integration.py
```python
import requests
from translator import Translator

class APIIntegration:
    def __init__(self):
        self.translator = Translator()

    def run(self):
        # Generate bearer tokens for both APIs
        token1 = self.get_token('https://partners.cloudkitchens.com/v1/auth/token', 'client_credentials', 'clientId1', 'clientSecret1', 'menus.get_current menus.publish orders.update storefront.store_availability menus.entity_suspension orders.create')
        token2 = self.get_token('https://partners.cloudkitchens.com/v1/auth/token', 'client_credentials', 'clientId2', 'clientSecret2', 'callback.error.write manager.menus manager.orders menus.async_job.read menus.get_current menus.read menus.upsert menus.upsert_hours orders.read ping')

        # Make a GET request to API #1
        response = requests.get('https://partners.cloudkitchens.com/v1/menu', headers={'X-Store-Id': 'storeId', 'Authorization': f'Bearer {token1}'})

        # Translate the response into a new JSON object
        translated_data = self.translator.translate(response.json())

        # Make a POST request to API #2
        requests.post('https://partners.cloudkitchens.com/v1/menus', headers={'X-Store-Id': 'storeId', 'Authorization': f'Bearer {token2}'}, json=translated_data)

    def get_token(self, url, grant_type, client_id, client_secret, scope):
        # Make a POST request to get the token
        response = requests.post(url, data={'grant_type': grant_type, 'client_id': client_id, 'client_secret': client_secret, 'scope': scope})

        # Return the token
        return response.json()['access_token']
```

Next, we will create the `translator.py` file. This file will contain the `Translator` class, which will handle the translation of the JSON data.

translator.py
```python
class Translator:
    def translate(self, data):
        # Translate the data according to the mapping table
        translated_data = {
            'categories': {categoryId: data['categories'][categoryId] for categoryId in data['categories']},
            'modifierGroups': {modifierGroupId: data['modifierGroups'][modifierGroupId] for modifierGroupId in data['modifierGroups']}
        }

        # Return the translated data
        return translated_data
```

Finally, we will create the `schedule.py` file. This file will contain the `Scheduler` class, which will handle the scheduling of the integration.

schedule.py
```python
import schedule
import time

class Scheduler:
    def schedule(self, job, frequency, days, time):
        # Schedule the job to run at the specified frequency, days, and time
        for day in days:
            schedule.every().day.at(time).do(job)

        # Keep the script running
        while True:
            schedule.run_pending()
            time.sleep(1)
```

We also need to create a `requirements.txt` file to specify the dependencies of the project.

requirements.txt
```
requests==2.25.1
schedule==1.1.0
```

This completes the implementation of the integration. The `main.py` file should be run to start the integration.