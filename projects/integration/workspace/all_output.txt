The architecture of the solution will consist of the following files:

1. `main.py`: This is the entry point of the application. It will contain the main function that will be executed to run the integration process.

2. `api_client.py`: This file will contain the `APIClient` class which will be responsible for making HTTP requests to the APIs.

3. `token_generator.py`: This file will contain the `TokenGenerator` class which will be responsible for generating bearer tokens for the APIs.

4. `data_transformer.py`: This file will contain the `DataTransformer` class which will be responsible for transforming the data received from API #1 to the format required by API #2.

5. `requirements.txt`: This file will contain the list of Python packages required to run the application.

Now, let's write the content of each file.

`main.py`
```python
import schedule
import time
from api_client import APIClient
from token_generator import TokenGenerator
from data_transformer import DataTransformer

def run_integration():
    # Generate bearer tokens
    token_generator = TokenGenerator()
    token1 = token_generator.generate_token('client_id1', 'client_secret1', 'scope1')
    token2 = token_generator.generate_token('client_id2', 'client_secret2', 'scope2')

    # Make a GET request to API #1
    api_client = APIClient()
    response = api_client.get('https://partners.cloudkitchens.com/v1/menu', token1)

    # Transform the data
    data_transformer = DataTransformer()
    transformed_data = data_transformer.transform(response.json())

    # Make a POST request to API #2
    api_client.post('https://partners.cloudkitchens.com/v1/menus', token2, transformed_data)

# Schedule the job to run weekly at 7:00 PM Eastern Standard Time on Monday, Thursday, and Saturday
schedule.every().monday.at("19:00").do(run_integration)
schedule.every().thursday.at("19:00").do(run_integration)
schedule.every().saturday.at("19:00").do(run_integration)

while True:
    schedule.run_pending()
    time.sleep(1)
```

`api_client.py`
```python
import requests

class APIClient:
    def get(self, url, token):
        headers = {'Authorization': f'Bearer {token}'}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response

    def post(self, url, token, data):
        headers = {'Authorization': f'Bearer {token}'}
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        return response
```

`token_generator.py`
```python
import requests

class TokenGenerator:
    def generate_token(self, client_id, client_secret, scope):
        data = {
            'grant_type': 'client_credentials',
            'client_id': client_id,
            'client_secret': client_secret,
            'scope': scope
        }
        response = requests.post('https://partners.cloudkitchens.com/v1/auth/token', data=data)
        response.raise_for_status()
        return response.json()['access_token']
```

`data_transformer.py`
```python
class DataTransformer:
    def transform(self, data):
        transformed_data = {
            'categories': data['categories'],
            'modifierGroups': data['modifierGroups']
        }
        return transformed_data
```

`requirements.txt`
```
requests==2.25.1
schedule==1.1.0
```

Please replace `'client_id1'`, `'client_secret1'`, `'scope1'`, `'client_id2'`, `'client_secret2'`, and `'scope2'` with the actual values.